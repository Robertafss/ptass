
    -   Bug Fix: Fixed bug in pattern exhaustive match logic that failed to detect exhaustive match when the subject expression was a unnarrowable expression form.
        ([pylance-release#2475](https://github.com/microsoft/pylance-release/issues/2475))
    -   Bug Fix: Improved the heuristics in the alias resolution logic to prefer declarations that are in non-exception paths even if the exception path has a typed decl and the non-exception decl must be inferred.
        ([pylance-release#2476](https://github.com/microsoft/pylance-release/issues/2476))
    -   Bug Fix: Fixed two bugs that generated false positive errors when using PEP 604 union syntax in an implicit type alias. The first bug affected the case where the union started with `None`. The second affected the case where a TypeVar was included in the union.
    -   Enhancement: Updated typeshed stubs to the latest.
    -   Bug Fix: Fixed bug that resulted in false positive reportIncompatibleVariableOverride error when one base class defined a symbol as a property and another base class defined a symbol as Any.
    -   Enhancement: Added support for the use of `Concatenate` as a type argument for a generic type alias that accepts a ParamSpec.
-   [1.1.229](https://github.com/microsoft/pyright/releases/tag/1.1.229)
    -   Bug Fix: Fixed a bug that caused semantic highlighting to sometimes skip information for certain tokens involved in member access expressions.
    -   Enhancement: Added checks for incompatible variable types for same-named instance or class variables in two base classes.
    -   Enhancement: Updated typeshed stubs to the latest version.
    -   Bug Fix: Fixed a bug that led to misleading type error messages and hover text when a type with an associated generic type alias was specialized. The underlying generic type was properly specialized, but the type alias itself appeared to be unspecialized still. Since the type alias is displayed in error messages and hover text, this was confusing.
    -   Bug Fix: Fixed a bug where classes that derive from `Any` are not allowed to be assigned to a TypeVar. This resulted in a false positive error when returning `NotImplemented` in a function that is annotated to return a TypeVar.
    -   Bug Fix: Fixed a bug that resulted in a false positive error "variable not in slots" when a value was assigned to a class variable that is a descriptor.
    -   Bug Fix: Fixed a bug in the `__post_init__` validation logic that resulted in a false positive when a dataclass with an `InitVar` derives from another dataclass with an `InitVar`.
    -   Enhancement: Added support for per-line suppression of diagnostics using `# pyright: ignore` comment. This also supports rule-specific suppression using a list of diagnostic rules, as in `# pyright: ignore [reportGeneralTypeIssues]`.
    -   Bug Fix: Fixed a bug in the reportUnnecessaryComparison diagnostic rule that resulted in false negatives when one of the two operands included a `None` in the type.
    -   Bug Fix: Fixed a bug that resulted in a false positive error when testing type compatibility of an invariant type argument that consists of a union of types, some of which are subtypes of each other.

## 2022.3.1 (9 March 2022)

Notable changes:

-   Enhancement: The bundled native module stubs for sklearn, scipy, and pandas have been updated.

In addition, Pylance's copy of Pyright has been updated from 1.1.226 to 1.1.228 including the following changes:

-   Unreleased in Pyright, but included in Pylance:
    -   Bug Fix: Improved solution to stack overflow and fixed another potential theoretical source based on code review.
-   [1.1.228](https://github.com/microsoft/pyright/releases/tag/1.1.228)
    -   Bug Fix: Improved "reportUnnecessaryComparison" diagnostic check so it catches more cases.
    -   Performance: Fixed performance bug that was causing a significant slowdown when evaluating highly nested call expressions especially when there are argument errors in the innermost expressions.
        ([pylance-release#2366](https://github.com/microsoft/pylance-release/issues/2366))
    -   Enhancement: Extended support for narrowing of index expressions to include those with negative subscripts, such as `a[-1]`. This is supported for all supported type guard patterns.
    -   Bug Fix: Fixed bug that resulted in a false positive error when using `typing.Self` in an inner function defined within an outer method.
    -   Enhancement: Added negative type narrowing support for sequence patterns in match statements.
    -   Bug Fix: Fixed a bug in negative type narrowing for class patterns in match statements when the class in the class pattern is one of the designated "special built-in classes" specified in PEP 634 and a class argument is specified.
    -   Bug Fix: Fixed a bug that resulted in incorrect TypeVar resolution when the TypeVar was